#!/bin/sh

# Author: nrv
# License: https://www.gnu.org/licenses/gpl-3.0.en.html
# Description:
#   In password-store,
#   for a selected pass record of form:
#     password
#     key: value
#     key: value
#     secret key*: value
#   1. Prompt user to select an entry in menu (such as dmenu), replacing password
#      and keys with * at the end with password_placeholder;
#   2. Prompt the user to select whether to yank it's value to clipboard
#      or type it

set -u

info() {
  printf >&2 'menu-pass-current: %s\n' "${*}"
}

self="${$}"

# guard: no MENU specified
if [ -z "${MENU-}" ]; then
  info 'ERROR: MENU environment variable is empty or unset\n'
  exit 1
fi

PASSWORD_PLACEHOLDER='****************'
MENU_PASS_CURRENT="${MENU_PASS_CURRENT:-'menu-pass-current'}"

entries="$(pass show "${MENU_PASS_CURRENT}")"

# Select value from password-store record
selected_key="$(
  printf '%s' "${entries}" |
    sed "1 s/.*/password*: ${PASSWORD_PLACEHOLDER}/" |       # add password key to the first line (does not have it by convention) and replace value with `PASSWORD_PLACEHOLDER`
    sed "s/\*: .*/*: ${PASSWORD_PLACEHOLDER}/" |             # replace every value which key is marked with * symbol at the end with password placeholder with `PASSWORD_PLACEHOLDER`
    { "${MENU}" -l 10 -p 'Select field: ' || kill "${self}"; } | # select entry with menu
    sed 's/: /\t/' |                                         # replace first ': ' (human-readable key-value separator with tab character)
    cut -f1                                                  # cut the key for further processing. it should be in the form of 'key' or 'key*' at this point
)"

selected_value="$(
  if [ "${selected_key}" = "password*" ]; then
    printf '%s' "${entries}" |
      head -n1                       # cut just first line if it's 'password*'
  else
    printf '%s' "${entries}" |
      grep -F "${selected_key}: " |  # find the selected key
      sed 's/: /\t/' |               # replace first ': ' (human-readable key-value separator with tab character)
      cut -f2                        # cut the value for further processing
  fi
)"

action="$(
  printf 'Type\nYank' |
    "${MENU}" -l 2 -p 'Choose an antion: '
)"

yank() {
  case "${XDG_SESSION_TYPE-}" in
    wayland) wl-copy || { info 'ERROR: cannot yank\n'; exit 1; } ;;
    X11) xclip -in -sel 'clipboard' || { info 'menu-pass-current: ERROR: cannot yank\n'; exit 1; } ;;
    *) info 'ERROR: unsupported display server or XDG_SESSION_TYPE is unset' ;;
  esac
}

# Perform action - type or copy
if [ "${action}" = 'Type' ]; then
  ydotool type "${selected_value}"
elif [ "${action}" = 'Yank' ]; then
  printf '%s' "${selected_value}" | yank
else
  printf '%s' "${selected_value}"
fi
